const express = require('express');



// Helper function to convert HH:MM:SS duration object to total seconds
const durationToSeconds = (duration) => {
    const hh = parseInt(duration.hh || 0);
    const mm = parseInt(duration.mm || 0);
    const ss = parseInt(duration.ss || 0);
    return (hh * 3600) + (mm * 60) + ss;
};



// This function will receive the prisma client instance from app.js
module.exports = (prisma) => {
    const router = express.Router();

    // --- CREATE (Save) Schedule and its SubTasks ---
    // Endpoint: POST /api/schedule
    router.post('/schedule', async (req, res) => {
        try {
            // Destructure data expected from the frontend
            const { mainTask, subTasks, personId } = req.body; // Adjusted payload structure

            // Basic validation for mainTask and personId
            if (!mainTask || !mainTask.name || !mainTask.totalDuration || !personId) {
                return res.status(400).json({ error: 'Missing required main task or person ID fields.' });
            }
            if (!Array.isArray(subTasks) || subTasks.length === 0) {
                return res.status(400).json({ error: 'No sub-tasks provided.' });
            }

            // Convert mainTask totalDuration to seconds
            const totalDurationSeconds = durationToSeconds(mainTask.totalDuration);

            // Prepare sub-tasks for nested creation (convert their durations to seconds)
            const subTasksToCreate = subTasks.map(subTask => ({
                name: subTask.name,
                durationSeconds: durationToSeconds(subTask.duration),
                status: 'PENDING' // Default status for new sub-tasks
                // No need for scheduleId here, Prisma handles the connection during nested create
            }));

            // Create the main Schedule entry and its associated SubTasks in one go
            const newSchedule = await prisma.schedule.create({
                data: {
                    title: mainTask.name,
                    description: mainTask.description || null, // Optional description
                    totalDurationSeconds: totalDurationSeconds,
                    status: 'PENDING', // Default status for new schedule
                    person: {
                        connect: { id: parseInt(personId) } // Connect to an existing Person
                    },
                    subTasks: {
                        createMany: {
                            data: subTasksToCreate,
                        },
                    },
                },
                include: { // Include subTasks in the response to confirm creation
                    subTasks: true,
                },
            });

            res.status(201).json(newSchedule); // 201 Created
        } catch (error) {
            console.error('Error saving schedule and sub-tasks:', error);

            // More specific error handling for Prisma errors
            if (error.code === 'P2002') { // Unique constraint violation (e.g., if you had unique on schedule title)
                res.status(409).json({ error: 'A schedule with this title already exists.' });
            } else if (error.code === 'P2025') { // Record not found (e.g., if personId doesn't exist)
                res.status(404).json({ error: 'The specified person (user) does not exist.' });
            } else {
                res.status(500).json({ error: 'Failed to save schedule data.', details: error.message });
            }
        }
    });










    // --- READ (Get all) Schedule Data (including subtasks) ---
    // Endpoint: GET /api/schedule
    router.get('/schedule', async (req, res) => {
        try {
            const allSchedules = await prisma.schedule.findMany({
                include: {
                    subTasks: true, // Include associated sub-tasks
                    person: {
                        select: { id: true, username: true, name: true } // Select specific person fields
                    }
                }
            });
            res.status(200).json(allSchedules);
        } catch (error) {
            console.error('Error fetching schedules:', error);
            res.status(500).json({ error: 'Failed to fetch schedule data.' });
        }
    });



    // --- READ (Get by ID) Schedule Data (including subtasks) ---
    // Endpoint: GET /api/schedule/:id
    router.get('/schedule/:id', async (req, res) => {
        try {
            const { id } = req.params;
            const scheduleEntry = await prisma.schedule.findUnique({
                where: {
                    id: parseInt(id),
                },
                include: {
                    subTasks: true,
                    person: {
                        select: { id: true, username: true, name: true }
                    }
                }
            });

            if (!scheduleEntry) {
                return res.status(404).json({ error: 'Schedule entry not found.' });
            }

            res.status(200).json(scheduleEntry);
        } catch (error) {
            console.error('Error fetching single schedule:', error);
            res.status(500).json({ error: 'Failed to fetch schedule entry.' });
        }
    });




    // --- UPDATE Schedule Data ---
    // Endpoint: PUT /api/schedule/:id
    router.put('/schedule/:id', async (req, res) => {
        try {
            const { id } = req.params;
            const { mainTask, subTasks, personId } = req.body; // Expecting similar structure for update

            if (!mainTask && !subTasks && !personId) {
                return res.status(400).json({ error: 'No fields provided for update.' });
            }

            // Prepare data for update (only include fields that are present)
            const updateData = {};
            if (mainTask) {
                if (mainTask.name !== undefined) updateData.title = mainTask.name;
                if (mainTask.description !== undefined) updateData.description = mainTask.description;
                if (mainTask.totalDuration !== undefined) {
                    updateData.totalDurationSeconds = durationToSeconds(mainTask.totalDuration);
                }
                // Update status if provided
                if (mainTask.status !== undefined && Object.values(prisma.ScheduleStatus).includes(mainTask.status)) {
                    updateData.status = mainTask.status;
                }
                if (mainTask.actualStartTime !== undefined) updateData.actualStartTime = new Date(mainTask.actualStartTime);
                if (mainTask.actualEndTime !== undefined) updateData.actualEndTime = new Date(mainTask.actualEndTime);
            }
            if (personId !== undefined) {
                updateData.person = {
                    connect: { id: parseInt(personId) }
                };
            }

            // For sub-tasks update, it's more complex: you'd typically have
            // separate endpoints for updating/deleting/creating individual sub-tasks
            // or send full sub-task array with IDs to reconcile.
            // For now, let's keep it simple and not handle complex sub-task updates via this route.
            // A more robust solution might use `upsert` or individual PUT/DELETE for subtasks.

            const updatedSchedule = await prisma.schedule.update({
                where: {
                    id: parseInt(id),
                },
                data: updateData,
                include: { subTasks: true, person: { select: { id: true, username: true } } } // Include for verification
            });

            // Note: Updating sub-tasks within the same PUT /api/schedule/:id call
            // is more involved. You might need to check if a subTask has an ID (update),
            // if not (create), or if it's missing from the new list (delete).
            // For a robust API, separate routes like PUT /api/subtask/:id and POST /api/schedule/:id/subtask
            // are often clearer.

            res.status(200).json(updatedSchedule);
        } catch (error) {
            console.error('Error updating schedule:', error);
            res.status(500).json({ error: 'Failed to update schedule data.', details: error.message });
        }
    });





    // --- DELETE Schedule Data (and cascade delete its subtasks) ---
    // Endpoint: DELETE /api/schedule/:id
    router.delete('/schedule/:id', async (req, res) => {
        try {
            const { id } = req.params;

            // Delete subtasks first (if not using cascade delete in schema.prisma)
            // If you add `@relation(onDelete: Cascade)` to the scheduleId field in SubTask model,
            // Prisma will handle cascade deletion automatically when you delete the parent Schedule.
            // Otherwise, you'd do:
            // await prisma.subTask.deleteMany({
            //     where: { scheduleId: parseInt(id) }
            // });

            await prisma.schedule.delete({
                where: {
                    id: parseInt(id),
                },
            });

            res.status(204).send(); // 204 No Content for successful deletion
        } catch (error) {
            console.error('Error deleting schedule:', error);
            // Handle case where schedule not found for deletion
            if (error.code === 'P2025') {
                return res.status(404).json({ error: 'Schedule entry not found for deletion.' });
            }
            res.status(500).json({ error: 'Failed to delete schedule entry.' });
        }
    });



    return router;
};